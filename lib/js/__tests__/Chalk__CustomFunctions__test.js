// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Chalk = require("../src/Chalk.js");
var Chalk$1 = require("chalk");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

Jest.describe("Custom Functions", (function (param) {
        Jest.test("'Chalk.level' returns 'Some(level)'", (function (param) {
                var lvl = Chalk.level(Chalk$1);
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Option.isSome(lvl)));
              }));
        Jest.test("'Chalk.levelRaw' returns an integer between 0 and 3 (inclusive)", (function (param) {
                var lvl = Chalk$1.level;
                var isInt = typeof lvl === "number" && lvl === Math.floor(lvl);
                var isInRange = lvl >= 0 && lvl <= 3;
                return Jest.Expect.toEqual([
                            true,
                            true
                          ], Jest.Expect.expect([
                                isInt,
                                isInRange
                              ]));
              }));
        Jest.test("'Chalk.levelExn' does not raise an exception", (function (param) {
                var result;
                try {
                  Chalk.levelExn(Chalk$1);
                  result = true;
                }
                catch (raw_e){
                  var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                  console.log(e);
                  result = false;
                }
                return Jest.Expect.toBe(true, Jest.Expect.expect(result));
              }));
        return Jest.test("Color support level is parsed correctly", (function (param) {
                      var lvl = Chalk.levelExn(Chalk$1);
                      var lvlInt = Chalk$1.level;
                      var parsedLvl = Chalk.levelFromInt(lvlInt);
                      var result = parsedLvl !== undefined ? lvl === parsedLvl : false;
                      return Jest.Expect.toBe(true, Jest.Expect.expect(result));
                    }));
      }));

/*  Not a pure module */
