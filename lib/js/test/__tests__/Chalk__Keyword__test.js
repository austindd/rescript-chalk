// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Chalk = require("../../src/Chalk.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Chalk__TestUtils = require("../test-utils/Chalk__TestUtils.js");

function isTrueU(x) {
  return x;
}

Jest.describe("Chalk.Keyword", (function (param) {
        Jest.test("'toString' produces 'string' data type for each 'keyword' type that is passed in", (function (param) {
                var result = Belt_Result.getWithDefault(Chalk__TestUtils.tryCatch(function (param) {
                          var arr = [];
                          Belt_Array.forEachU(Chalk__TestUtils.keywordArray, (function (kw) {
                                  var isString = typeof kw === "string";
                                  arr.push(isString);
                                  
                                }));
                          return Belt_Array.everyU(arr, isTrueU);
                        }), false);
                return Jest.Expect.toBe(true, Jest.Expect.expect(result));
              }));
        Jest.test("'fromString(toString(keyword))' should yield 'Some(keyword)'", (function (param) {
                var result = Belt_Result.getWithDefault(Chalk__TestUtils.tryCatch(function (param) {
                          var arr = [];
                          Belt_Array.forEachU(Chalk__TestUtils.keywordArray, (function (kw) {
                                  var maybeKw = Curry._1(Chalk.Keyword.fromString, kw);
                                  var isGood = maybeKw !== undefined ? Curry._2(Chalk.Keyword.equal, kw, maybeKw) : false;
                                  arr.push(isGood);
                                  
                                }));
                          return Belt_Array.everyU(arr, isTrueU);
                        }), false);
                return Jest.Expect.toBe(true, Jest.Expect.expect(result));
              }));
        Jest.test("'equal(a, a)' should always be 'true'", (function (param) {
                var result = Belt_Result.getWithDefault(Chalk__TestUtils.tryCatch(function (param) {
                          var arr = [];
                          Belt_Array.forEachU(Chalk__TestUtils.keywordArray, (function (kw) {
                                  var isGood = Curry._2(Chalk.Keyword.equal, kw, kw) === true;
                                  arr.push(isGood);
                                  
                                }));
                          return Belt_Array.everyU(arr, isTrueU);
                        }), false);
                return Jest.Expect.toBe(true, Jest.Expect.expect(result));
              }));
        Jest.test("'compare(a, a)' should always be '0'", (function (param) {
                var result = Belt_Result.getWithDefault(Chalk__TestUtils.tryCatch(function (param) {
                          var arr = [];
                          Belt_Array.forEachU(Chalk__TestUtils.keywordArray, (function (kw) {
                                  var isGood = Curry._2(Chalk.Keyword.compare, kw, kw) === 0;
                                  arr.push(isGood);
                                  
                                }));
                          return Belt_Array.everyU(arr, isTrueU);
                        }), false);
                return Jest.Expect.toBe(true, Jest.Expect.expect(result));
              }));
        return Jest.test("passing two different keywords to 'compare' should always be either '-1' or '1'", (function (param) {
                      var result = Belt_Result.getWithDefault(Chalk__TestUtils.tryCatch(function (param) {
                                var arr = [];
                                var myKw = Belt_Array.shuffle(Chalk__TestUtils.keywordArray)[0];
                                Belt_Array.forEachU(Chalk__TestUtils.keywordArray, (function (kw) {
                                        if (Curry._2(Chalk.Keyword.equal, myKw, kw)) {
                                          return ;
                                        }
                                        var cmpResult = Curry._2(Chalk.Keyword.compare, myKw, kw);
                                        var isGood = cmpResult === -1 || cmpResult === 1;
                                        arr.push(isGood);
                                        
                                      }));
                                return Belt_Array.everyU(arr, isTrueU);
                              }), false);
                      return Jest.Expect.toBe(true, Jest.Expect.expect(result));
                    }));
      }));

exports.isTrueU = isTrueU;
/*  Not a pure module */
