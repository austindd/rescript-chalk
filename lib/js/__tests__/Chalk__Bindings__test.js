// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Chalk = require("../src/Chalk.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Chalk$1 = require("chalk");
var Random = require("bs-platform/lib/js/random.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Chalk__Keyword = require("../src/Chalk__Keyword.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

Random.init(5230);

var maxIntRange = Math.pow(2, 30) - 1 | 0;

var x = Math.pow(2, 30) | 0;

function randomInt(param) {
  return Random.$$int(maxIntRange);
}

function randomChar(param) {
  return String.fromCodePoint(Random.$$int(1114111));
}

function randomCharU(param) {
  return String.fromCodePoint(Random.$$int(1114111));
}

function randomString(minLength, maxLength) {
  var upperBound = maxLength - minLength | 0;
  var size = upperBound > 0 && upperBound <= maxIntRange ? Random.$$int(upperBound) + minLength | 0 : 1;
  var arr = Belt_Array.makeByU(size, randomCharU);
  return arr.join("");
}

var Rand = {
  x: x,
  $$int: randomInt,
  $$char: randomChar,
  string: randomString,
  bool: Random.bool
};

var text = "Hello World";

function $$eval(c) {
  var x = Chalk.applyStyle(c, text);
  return typeof x === "string";
}

function tryCatch(thunk) {
  try {
    return {
            TAG: /* Ok */0,
            _0: Curry._1(thunk, undefined)
          };
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    console.log(err);
    return {
            TAG: /* Error */1,
            _0: err
          };
  }
}

Jest.describe("Chalk Bindings", (function (param) {
        Jest.test("Chalk.reset", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.reset);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bold", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bold);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.dim", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.dim);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.italic", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.italic);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.underline", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.underline);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.inverse", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.inverse);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.hidden", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.hidden);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.strikethrough", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.strikethrough);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.visible", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.visible);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.black", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.black);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.red", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.red);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.green", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.green);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.yellow", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.yellow);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.blue", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.blue);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.magenta", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.magenta);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.cyan", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.cyan);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.white", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.white);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.blackBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.blackBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.gray", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.gray);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.grey", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.grey);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.redBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.redBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.greenBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.greenBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.yellowBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.yellowBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.blueBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.blueBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.magentaBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.magentaBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.cyanBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.cyanBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.whiteBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.whiteBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgBlack", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgBlack);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgRed", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgRed);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgGreen", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgGreen);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgYellow", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgYellow);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgBlue", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgBlue);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgMagenta", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgMagenta);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgCyan", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgCyan);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgWhite", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgWhite);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgBlackBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgBlackBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgGray", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgGray);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgGrey", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgGrey);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgRedBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgRedBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgGreenBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgGreenBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgYellowBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgYellowBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgBlueBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgBlueBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgMagentaBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgMagentaBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgCyanBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgCyanBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgWhiteBright", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          return $$eval(Chalk$1.bgWhiteBright);
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.rgb", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var r = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var g = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var b = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.rgb(r, g, b);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.hex", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var hexValue = randomString(0, 100);
                            var style = Chalk$1.hex(hexValue);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.keyword", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          var loop = function (_maybeKw) {
                            while(true) {
                              var maybeKw = _maybeKw;
                              if (maybeKw === undefined) {
                                return ;
                              }
                              var style = Chalk$1.keyword(maybeKw);
                              arr.push($$eval(style));
                              _maybeKw = Chalk__Keyword.Enum.next(maybeKw);
                              continue ;
                            };
                          };
                          loop(Chalk__Keyword.Enum.first);
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.hsl", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var h = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var s = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var l = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.hsl(h, s, l);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.hsv", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var h = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var s = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var v = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk.hsv(Chalk$1, h, s, v);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.hwb", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var h = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var w = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var b = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.hwb(h, w, b);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.ansi", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var ansiValue = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.ansi(ansiValue);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.ansi256", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var ansi256Value = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.ansi256(ansi256Value);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgRgb", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var r = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var g = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var b = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.bgRgb(r, g, b);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgHex", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var hexValue = randomString(0, 100);
                            var style = Chalk$1.bgHex(hexValue);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgKeyword", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          var loop = function (_maybeKw) {
                            while(true) {
                              var maybeKw = _maybeKw;
                              if (maybeKw === undefined) {
                                return ;
                              }
                              var style = Chalk$1.bgKeyword(maybeKw);
                              arr.push($$eval(style));
                              _maybeKw = Chalk__Keyword.Enum.next(maybeKw);
                              continue ;
                            };
                          };
                          loop(Chalk__Keyword.Enum.first);
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgHsl", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var h = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var s = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var l = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.bgHsl(h, s, l);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgHsv", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var h = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var s = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var v = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk.bgHsv(Chalk$1, h, s, v);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgHwb", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var h = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var w = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var b = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.bgHwb(h, w, b);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        Jest.test("Chalk.bgAnsi", (function (param) {
                var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                          var arr = [];
                          for(var _for = 1; _for <= 10000; ++_for){
                            var ansiValue = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                            var style = Chalk$1.bgAnsi(ansiValue);
                            arr.push($$eval(style));
                          }
                          if (arr.includes(false)) {
                            return false;
                          } else {
                            return arr.length !== 0;
                          }
                        }), false);
                return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
              }));
        return Jest.test("Chalk.bgAnsi256", (function (param) {
                      var result = Belt_Result.getWithDefault(tryCatch(function (param) {
                                var arr = [];
                                for(var _for = 1; _for <= 10000; ++_for){
                                  var ansi256Value = Random.bool(undefined) ? Random.$$int(maxIntRange) : -Random.$$int(maxIntRange) | 0;
                                  var style = Chalk$1.bgAnsi256(ansi256Value);
                                  arr.push($$eval(style));
                                }
                                if (arr.includes(false)) {
                                  return false;
                                } else {
                                  return arr.length !== 0;
                                }
                              }), false);
                      return Jest.ExpectJs.toBe(true, Jest.ExpectJs.expect(result));
                    }));
      }));

var randomSeed = 5230;

var iterationLimit = 10000;

exports.randomSeed = randomSeed;
exports.Rand = Rand;
exports.text = text;
exports.$$eval = $$eval;
exports.tryCatch = tryCatch;
exports.iterationLimit = iterationLimit;
/*  Not a pure module */
